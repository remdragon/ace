from typing import Any, ItemsView, Iterator, List, MutableMapping, Tuple, TypeVar

T = TypeVar ( 'T' )

class CaseFoldedDict ( MutableMapping[str,T] ):
	def __init__ ( self, data: Any = ..., **kwargs: T ) -> None: ...
	def __setitem__ ( self, key: str, value: T ) -> None: ...
	def __getitem__ ( self, key: str ) -> T: ...
	def __delitem__ ( self, key: str ) -> None: ...
	def __iter__ ( self ) -> Iterator[str]: ...
	#def iteritems ( self ) -> Iterator[Tuple[str,T]]: ...
	def items ( self ) -> ItemsView[str,T]: ...
	def __len__ ( self ) -> int: ...
	def lower_items ( self ) -> Iterator[Tuple[str,T]]: ...
	def folded_items ( self ) -> Iterator[Tuple[str,T]]: ...
	def __eq__ ( self, other: Any ) -> bool: ...
	def copy ( self ) -> MutableMapping[str,T]: ...
	def __repr__ ( self ) -> str: ...
